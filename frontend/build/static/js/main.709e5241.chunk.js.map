{"version":3,"sources":["components/BarChart.js","components/PieChart.js","components/TraceChart.js","App.js","reportWebVitals.js","index.js"],"names":["BarChart","props","state","data","type","x","y","name","layout","width","height","title","React","Component","PieChart","self","this","d3","csv_file","then","data_stats","console","log","setState","catch","err","values","map","p","y_var_name","labels","x_var_name","plot_title","TraceChart","i","mode","marker","color","yaxis","text","y_label","xaxis","x_label","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.709e5241.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Plot from \"react-plotly.js\";\n\n//import * as d3 from 'd3';\n\n\nclass BarChart extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {data: []};\n  }\n\n  render() {\n\n    return (\n\n      <Plot\n\n        data={[\n\n  \n\n          { type: \"bar\", x: [\"manual check\"], y: [1400], name: \"Without our solution\" },\n          { type: \"bar\", x: [\"our solution\"], y: [700], name: \"With our solution\"},\n\n        ]}\n\n        layout={{ width: 640, height: 480, title: \"Some made-up stats\" }}\n\n      />\n\n    );\n\n  }\n\n}\n\nexport default BarChart;","import React from \"react\";\n\nimport Plot from \"react-plotly.js\";\n\nimport * as d3 from 'd3';\n\nclass PieChart extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {data: []};\n  }\n\n  componentDidMount() {\n\n    const self = this;\n\n    d3.csv(`/data/${this.props.csv_file}`).then(function(data_stats) {\n      console.log(data_stats);\n      self.setState({\n        data: data_stats\n      });\n    }).catch(function(err) {\n        throw err;\n    })\n}\n\n\n  render() {\n\n    const data = [{\n        values: this.state.data.map(p => p[this.props.y_var_name]),\n        labels: this.state.data.map(p => p[this.props.x_var_name]),\n        type: 'pie'\n      }];\n\n    const layout = {\n        height: 400,\n        width: 500,\n        title: this.props.plot_title\n      };\n\n    return (\n\n      <Plot\n        data={data}\n        layout={layout}\n\n      />\n\n    );\n\n  }\n\n}\n\nexport default PieChart;","import React from \"react\";\n\nimport Plot from \"react-plotly.js\";\n\nimport * as d3 from 'd3';\n\nclass TraceChart extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {data: []};\n  }\n\n\n\n\n  componentDidMount() {\n\n    const self = this;\n\n    d3.csv(`/data/${this.props.csv_file}`).then(function(data_stats) {\n\n      self.setState({\n        data: data_stats\n      });\n    }).catch(function(err) {\n        throw err;\n    })\n}\n\n\n  render() {\n\n    \n\n    return (\n\n      <Plot\n\n      data = {\n        [{\n            y: this.state.data.map(p => p[this.props.y_var_name]),\n            x: this.state.data.map((p,i) => i), // we could also, alternatively, get equipment_id instead of its index but that makes the plot look heavy\n\n       \n\n          mode: \"lines+markers\",\n\n          marker: { color: \"red\" },\n\n         }]}\n\n        layout={{ width: 640, height: 480, title: this.props.plot_title, \n      \n        yaxis: {\n          title: {\n            text: this.props.y_label\n          }},\n          xaxis: {\n            title: {\n              text: this.props.x_label\n            }}\n      }}\n\n      />\n\n    );\n\n  }\n\n}\n\nexport default TraceChart;","import './App.css';\nimport BarChart from \"./components/BarChart\"\nimport PieChart from \"./components/PieChart\"\nimport TraceChart from \"./components/TraceChart\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Team CreativeNet\n      </header>\n      <p>We are making an ML-based optimiser.</p>\n      <TraceChart\n      csv_file=\"equipment_id_train_counts.csv\"\n      plot_title=\"Equipment ID train counts\"\n      x_label=\"Equipment number (in a series)\"\n      y_label=\"Frequency\"\n      y_var_name=\"0\"\n      \n      />\n      <p/>\n      <TraceChart\n      csv_file=\"completion_date_count_cases.csv\"\n      plot_title=\"Cases by completion date (temporal)\"\n      x_label=\"Completion (in a sorted series)\"\n      y_label=\"Number of cases\"\n      y_var_name=\"equipment_id\"\n      />\n      <p/>\n\n      <TraceChart\n      csv_file=\"completion_date.csv\"\n      plot_title=\"Cases by completion date (sorted by number of cases)\"\n      x_label=\"Completion date (in a series sorted by number of cases)\"\n      y_label=\"Number of cases\"\n      y_var_name=\"0\"\n      />\n      <p/>\n      <PieChart\n      plot_title=\"Action recommendations by category\"\n      csv_file=\"action_recommendation_category.csv\"\n      x_var_name=\"action_recommendation_category\"\n      y_var_name=\"0\"\n      />\n      <p>More details will come later.</p>\n      <p>For now, another fake plot (for which we have not found real data yet):</p>\n      <BarChart />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}